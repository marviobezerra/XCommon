using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Newtonsoft.Json.Serialization;
using XCommon.Application;
using XCommon.Application.Login;
using XCommon.Patterns.Ioc;
using XCommon.Web.Authentication;
using XCommon.Web.Authentication.Ticket;
using XCommon.Web.Extensions;
[{factoryUsing}]

namespace [{namespace}]
{
    public class Startup
    {
        public IConfigurationRoot Configuration { get; }

        public Startup(IHostingEnvironment env)
        {
            var builder = new ConfigurationBuilder()
                .SetBasePath(env.ContentRootPath)
                .AddJsonFile("appsettings.json", optional: true, reloadOnChange: true)
                .AddJsonFile($"appsettings.{env.EnvironmentName}.json", optional: true);

            builder.AddEnvironmentVariables();
            Configuration = builder.Build();
        }
        
        public void ConfigureServices(IServiceCollection services)
        {
            services
                .AddMvc()
                .AddJsonOptions(options =>
                {
                    options.SerializerSettings.ContractResolver = new DefaultContractResolver();
                });

            services.AddScoped<IHttpContextAccessor, HttpContextAccessor>();
        }

        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            ApplicationSettings appSettings = Configuration.Get<ApplicationSettings>("[{name}]");
            IHttpContextAccessor httpContextAccessor = app.ApplicationServices.GetRequiredService<IHttpContextAccessor>();

            Kernel.Map<ITicketManager>().To<TicketManager>(httpContextAccessor);
            Kernel.Map<ITicketManagerWeb>().To<TicketManager>(httpContextAccessor);
            Kernel.Map<IApplicationSettings>().To(appSettings);

            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
                app.UseDatabaseErrorPage();
            }
            else
            {
                app.UseExceptionHandler("/Home/Error");
            }

            app
				// Configure external providers, then uncomment this line
                //.UseXCommonAuthentication(Configuration)
                .UseStaticFiles()                
                .UseMvc(routes =>
                {
                    routes.MapRoute(
                        name: "angular",
                        template: "{*url}",
                        defaults: new { controller = "Home", action = "Index" });
                });
        }        
    }
}
