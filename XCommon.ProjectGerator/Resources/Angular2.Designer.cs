//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace XCommon.ProjectGerator.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Angular2 {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Angular2() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("XCommon.ProjectGerator.Resources.Angular2", typeof(Angular2).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /// &lt;reference path=&quot;App.Variables.scss&quot; /&gt;
        ///@import &quot;App.Variables.scss&quot;;
        ///
        ///body {
        ///	margin: 0;
        ///	padding: 0;
        ///    font-family: Roboto, &quot;Helvetica Neue&quot;, sans-serif;
        ///}
        ///
        ///* {
        ///	-webkit-font-smoothing: antialiased;
        ///	-moz-osx-font-smoothing: grayscale;
        ///}
        ///
        ///.facebook {
        ///	background-color: $Social-Facebook-Color !important;
        ///}
        ///
        ///.google {
        ///	background-color: $Social-Google-Color !important;
        ///}
        ///.
        /// </summary>
        internal static string AppThemeScss {
            get {
                return ResourceManager.GetString("AppThemeScss", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to $font-stack: Helvetica, sans-serif;
        ///$primary-color: #333;
        ///$Social-Google-Color: #dd4b39;
        ///$Social-Facebook-Color: #3b5998;
        ///.
        /// </summary>
        internal static string AppVariablesScss {
            get {
                return ResourceManager.GetString("AppVariablesScss", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h1&gt;
        ///  {{ Title }}
        ///&lt;/h1&gt;
        ///.
        /// </summary>
        internal static string ComponentHTML {
            get {
                return ResourceManager.GetString("ComponentHTML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to export * from &quot;./app-home.component&quot;;.
        /// </summary>
        internal static string ComponentIndex {
            get {
                return ResourceManager.GetString("ComponentIndex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ComponentStyle {
            get {
                return ResourceManager.GetString("ComponentStyle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to import { Component } from &quot;@angular/core&quot;;
        ///
        ///@Component({
        ///  selector: &quot;app-root&quot;,
        ///  templateUrl: &quot;/html/components/home/app-home.html&quot;,
        ///  styleUrls: [require(&quot;./app-home.scss&quot;)]
        ///})
        ///export class AppComponent {
        ///  Title = &quot;App works!&quot;;
        ///}
        ///.
        /// </summary>
        internal static string ComponentTypeScript {
            get {
                return ResourceManager.GetString("ComponentTypeScript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /// &lt;binding ProjectOpened=&apos;dev:watch&apos; /&gt;
        ///var gulp = require(&apos;gulp&apos;),
        ///	gutil = require(&apos;gulp-util&apos;),
        ///	webpack = require(&apos;webpack&apos;),
        ///	htmlmin = require(&apos;gulp-htmlmin&apos;),
        ///	shell = require(&apos;gulp-shell&apos;),
        ///	livereload = require(&quot;gulp-livereload&quot;),
        ///	rimraf = require(&quot;gulp-rimraf&quot;),
        ///	webpackStream = require(&quot;webpack-stream&quot;),
        ///	merge = require(&apos;webpack-merge&apos;);
        ///
        ///var helper = {
        ///	tasks: {
        ///		clear: &quot;clear&quot;,
        ///		watch: &quot;dev:watch&quot;,
        ///		html: {
        ///			page: &quot;dev:html:page&quot;
        ///		},
        ///		dnx: {
        ///		    ts: &quot;dnx:typescri [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GulpFile {
            get {
                return ResourceManager.GetString("GulpFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /// &lt;binding ProjectOpened=&apos;dev:watch&apos; /&gt;
        ///var gulp = require(&apos;gulp&apos;),
        ///	gutil = require(&apos;gulp-util&apos;),
        ///	webpack = require(&apos;webpack&apos;),
        ///	htmlmin = require(&apos;gulp-htmlmin&apos;),
        ///	shell = require(&apos;gulp-shell&apos;),
        ///	livereload = require(&quot;gulp-livereload&quot;),
        ///	rimraf = require(&quot;gulp-rimraf&quot;),
        ///	webpackStream = require(&quot;webpack-stream&quot;),
        ///	merge = require(&apos;webpack-merge&apos;);
        ///
        ///var helper = {
        ///	tasks: {
        ///		clear: &quot;clear&quot;,
        ///		watch: &quot;dev:watch&quot;,
        ///		html: {
        ///			page: &quot;dev:html:page&quot;
        ///		},
        ///		default: {
        ///			dev: &quot;default:de [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GulpFileSimple {
            get {
                return ResourceManager.GetString("GulpFileSimple", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;!DOCTYPE html&gt;
        ///&lt;html&gt;
        ///&lt;head&gt;
        ///    &lt;meta charset=&quot;utf-8&quot; /&gt;
        ///    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;
        ///    &lt;title&gt;My App&lt;/title&gt;
        ///    &lt;base href=&quot;/&quot;&gt;
        ///    &lt;link rel=&quot;icon&quot; type=&quot;image/x-icon&quot; href=&quot;favicon.ico&quot;&gt;
        ///    &lt;link href=&quot;/assets/bundle.css&quot; rel=&quot;stylesheet&quot; /&gt;
        ///    &lt;link href=&quot;https://fonts.googleapis.com/icon?family=Material+Icons&quot; rel=&quot;stylesheet&quot;&gt;
        ///&lt;/head&gt;
        ///&lt;body&gt;
        ///    &lt;app-root&gt;Whait&lt;/app-root&gt;
        ///    &lt;script type=&quot;text/javascript&quot;&gt;{0}&lt;/script&gt;
        ///    &lt;script type=&quot; [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string IndexHtml {
            get {
                return ResourceManager.GetString("IndexHtml", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to import { bootstrap } from &quot;@angular/platform-browser-dynamic&quot;;
        ///import { AppComponent } from &quot;./Components/Home/&quot;;
        ///
        ///bootstrap(AppComponent)
        ///    .catch((reason: any) =&gt; console.error(reason));
        ///
        ///.
        /// </summary>
        internal static string MainApp {
            get {
                return ResourceManager.GetString("MainApp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///  &quot;author&quot;: &quot;&quot;,
        ///  &quot;description&quot;: &quot;&quot;,
        ///  &quot;dependencies&quot;: {
        ///    &quot;@angular/common&quot;: &quot;2.0.0-rc.3&quot;,
        ///    &quot;@angular/compiler&quot;: &quot;2.0.0-rc.3&quot;,
        ///    &quot;@angular/core&quot;: &quot;2.0.0-rc.3&quot;,
        ///    &quot;@angular/http&quot;: &quot;2.0.0-rc.3&quot;,
        ///    &quot;@angular/platform-browser&quot;: &quot;2.0.0-rc.3&quot;,
        ///    &quot;@angular/platform-browser-dynamic&quot;: &quot;2.0.0-rc.3&quot;,
        ///    &quot;@angular/router&quot;: &quot;3.0.0-alpha.7&quot;,
        ///    &quot;core-js&quot;: &quot;^2.4.0&quot;,
        ///    &quot;reflect-metadata&quot;: &quot;^0.1.3&quot;,
        ///    &quot;rxjs&quot;: &quot;5.0.0-beta.6&quot;,
        ///    &quot;zone.js&quot;: &quot;0.6.12&quot;,
        ///    &quot;@angular2-material/button&quot;: &quot;^2.0 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PackageJson {
            get {
                return ResourceManager.GetString("PackageJson", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to import &apos;core-js/es6&apos;;
        ///import &apos;reflect-metadata&apos;;
        ///require(&apos;zone.js/dist/zone&apos;);.
        /// </summary>
        internal static string Polyfills {
            get {
                return ResourceManager.GetString("Polyfills", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///	&quot;compilerOptions&quot;: {
        ///		&quot;target&quot;: &quot;es5&quot;,
        ///		&quot;module&quot;: &quot;commonjs&quot;,
        ///		&quot;moduleResolution&quot;: &quot;node&quot;,
        ///		&quot;sourceMap&quot;: true,
        ///		&quot;emitDecoratorMetadata&quot;: true,
        ///		&quot;experimentalDecorators&quot;: true,
        ///		&quot;removeComments&quot;: false,
        ///		&quot;noImplicitAny&quot;: true,
        ///		&quot;suppressImplicitAnyIndexErrors&quot;: true
        ///	}
        ///}
        ///.
        /// </summary>
        internal static string TsConfigJson {
            get {
                return ResourceManager.GetString("TsConfigJson", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///  &quot;globalDependencies&quot;: {
        ///    &quot;core-js&quot;: &quot;registry:dt/core-js#0.0.0+20160317120654&quot;,
        ///    &quot;jasmine&quot;: &quot;registry:dt/jasmine#2.2.0+20160505161446&quot;,
        ///    &quot;node&quot;: &quot;registry:dt/node#4.0.0+20160509154515&quot;,
        ///    &quot;hammerjs&quot;: &quot;registry:dt/hammerjs#2.0.4+20160417130828&quot;
        ///  }
        ///}
        ///.
        /// </summary>
        internal static string TypingsJson {
            get {
                return ResourceManager.GetString("TypingsJson", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to import &quot;@angular/platform-browser&quot;;
        ///import &quot;@angular/platform-browser-dynamic&quot;;
        ///import &quot;@angular/core&quot;;
        ///import &quot;@angular/common&quot;;
        ///import &quot;@angular/http&quot;;
        ///import &quot;@angular/router&quot;;
        ///import &quot;@angular/forms&quot;;
        ///
        ///import &quot;rxjs&quot;;
        ///
        ///import &quot;@angular2-material/core&quot;;
        ///import &quot;@angular2-material/button&quot;;
        ///import &quot;@angular2-material/card&quot;;
        ///import &quot;@angular2-material/checkbox&quot;;
        ///import &quot;@angular2-material/sidenav&quot;;
        ///import &quot;@angular2-material/input&quot;;
        ///import &quot;@angular2-material/list&quot;;
        ///import &quot;@angular2-materia [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Vendor {
            get {
                return ResourceManager.GetString("Vendor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var path = require(&apos;path&apos;),
        ///	ExtractTextPlugin = require(&quot;extract-text-webpack-plugin&quot;),
        ///	webpack = require(&apos;webpack&apos;);
        ///
        ///module.exports = {
        ///	entry: [
        ///		&quot;./app/polyfills.ts&quot;,
        ///		&quot;./app/vendor.ts&quot;,
        ///		&quot;./app/main.ts&quot;,
        ///        &quot;./app/styles/app.theme.scss&quot;
        ///	],
        ///	output: {
        ///		path: path.join(__dirname, &quot;wwwroot&quot;, &quot;asserts&quot;),
        ///		filename: &quot;bundle.js&quot;
        ///	},
        ///	plugins: [
        ///		new ExtractTextPlugin(&quot;bundle.css&quot;)
        ///	],
        ///
        ///	resolve: {
        ///		extensions: [&quot;&quot;, &quot;.js&quot;, &quot;.ts&quot;, &quot;.scss&quot;, &quot;.css&quot;]
        ///	},
        ///
        ///	module: {
        ///		loader [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string WebpackConfig {
            get {
                return ResourceManager.GetString("WebpackConfig", resourceCulture);
            }
        }
    }
}
